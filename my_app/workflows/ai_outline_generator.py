from typing import List, Dict
from pydantic import BaseModel
from llama_index.llms.openai import OpenAI
from fastapi import HTTPException

from ..config import OPENAI_API_KEY, MODEL_NAME
from .curriculum_extraction_workflow import CurriculumContext

class ModuleOutline(BaseModel):
    """Module outline generated by AI"""
    name: str
    description: str
    learning_outcomes: List[str]
    prerequisites: List[str]
    estimated_duration: str

class LessonOutline(BaseModel):
    """Lesson outline generated by AI"""
    name: str
    description: str
    key_points: List[str]
    activities: List[str]
    resources: List[str]
    assessment_ideas: List[str]

class ContentSection(BaseModel):
    """Content section for a lesson"""
    title: str
    content: str
    examples: List[str]
    exercises: List[str]

class AIOutlineGenerator:
    def __init__(self):
        """Initialize the AI generator"""
        if not OPENAI_API_KEY:
            raise HTTPException(
                status_code=500,
                detail="Missing OPENAI_API_KEY"
            )
        
        self.llm = OpenAI(model=MODEL_NAME, api_key=OPENAI_API_KEY)

    async def generate_module_outline(
        self,
        curriculum_context: CurriculumContext,
        module_number: int,
        total_modules: int
    ) -> ModuleOutline:
        """Generate a module outline based on curriculum context"""
        prompt = f"""Based on the following curriculum context, generate an outline for module {module_number} of {total_modules}.
        This module should fit logically in the progression of the full course.

        Curriculum Context:
        - Learning Objectives: {curriculum_context.learning_objectives}
        - Key Concepts: {curriculum_context.key_concepts}
        - Skill Level: {curriculum_context.skill_level}
        - Domain Context: {curriculum_context.domain_context}

        Generate a module outline in the following format:
        NAME: [module name]
        DESCRIPTION: [brief description]
        LEARNING OUTCOMES:
        - [outcome 1]
        - [outcome 2]
        PREREQUISITES:
        - [prerequisite 1]
        - [prerequisite 2]
        ESTIMATED DURATION: [duration]
        """

        try:
            response = await self.llm.acomplete(prompt)
            text = response.text

            # Parse response
            sections = text.split('\n')
            name = ""
            description = ""
            learning_outcomes = []
            prerequisites = []
            duration = ""

            current_section = None
            for line in sections:
                line = line.strip()
                if line.startswith("NAME:"):
                    name = line.replace("NAME:", "").strip()
                elif line.startswith("DESCRIPTION:"):
                    description = line.replace("DESCRIPTION:", "").strip()
                elif line.startswith("LEARNING OUTCOMES:"):
                    current_section = "outcomes"
                elif line.startswith("PREREQUISITES:"):
                    current_section = "prerequisites"
                elif line.startswith("ESTIMATED DURATION:"):
                    duration = line.replace("ESTIMATED DURATION:", "").strip()
                elif line.startswith("-") and current_section:
                    item = line.lstrip("- ").strip()
                    if current_section == "outcomes":
                        learning_outcomes.append(item)
                    elif current_section == "prerequisites":
                        prerequisites.append(item)

            return ModuleOutline(
                name=name,
                description=description,
                learning_outcomes=learning_outcomes,
                prerequisites=prerequisites,
                estimated_duration=duration
            )

        except Exception as e:
            raise HTTPException(
                status_code=500,
                detail=f"Failed to generate module outline: {str(e)}"
            )

    async def generate_lesson_outline(
        self,
        curriculum_context: CurriculumContext,
        module_name: str,
        lesson_number: int,
        total_lessons: int
    ) -> LessonOutline:
        """Generate a lesson outline based on curriculum context"""
        prompt = f"""Based on the following curriculum context, generate an outline for lesson {lesson_number} of {total_lessons}
        in the module "{module_name}".

        Curriculum Context:
        - Learning Objectives: {curriculum_context.learning_objectives}
        - Key Concepts: {curriculum_context.key_concepts}
        - Skill Level: {curriculum_context.skill_level}
        - Relevant Content: {curriculum_context.relevant_content}

        Generate a lesson outline in the following format:
        NAME: [lesson name]
        DESCRIPTION: [brief description]
        KEY POINTS:
        - [point 1]
        - [point 2]
        ACTIVITIES:
        - [activity 1]
        - [activity 2]
        RESOURCES:
        - [resource 1]
        - [resource 2]
        ASSESSMENT IDEAS:
        - [idea 1]
        - [idea 2]
        """

        try:
            response = await self.llm.acomplete(prompt)
            text = response.text

            # Parse response
            sections = text.split('\n')
            name = ""
            description = ""
            key_points = []
            activities = []
            resources = []
            assessment_ideas = []

            current_section = None
            for line in sections:
                line = line.strip()
                if line.startswith("NAME:"):
                    name = line.replace("NAME:", "").strip()
                elif line.startswith("DESCRIPTION:"):
                    description = line.replace("DESCRIPTION:", "").strip()
                elif line.startswith("KEY POINTS:"):
                    current_section = "points"
                elif line.startswith("ACTIVITIES:"):
                    current_section = "activities"
                elif line.startswith("RESOURCES:"):
                    current_section = "resources"
                elif line.startswith("ASSESSMENT IDEAS:"):
                    current_section = "assessment"
                elif line.startswith("-") and current_section:
                    item = line.lstrip("- ").strip()
                    if current_section == "points":
                        key_points.append(item)
                    elif current_section == "activities":
                        activities.append(item)
                    elif current_section == "resources":
                        resources.append(item)
                    elif current_section == "assessment":
                        assessment_ideas.append(item)

            return LessonOutline(
                name=name,
                description=description,
                key_points=key_points,
                activities=activities,
                resources=resources,
                assessment_ideas=assessment_ideas
            )

        except Exception as e:
            raise HTTPException(
                status_code=500,
                detail=f"Failed to generate lesson outline: {str(e)}"
            )

    async def generate_lesson_content(
        self,
        curriculum_context: CurriculumContext,
        lesson_outline: LessonOutline
    ) -> List[ContentSection]:
        """Generate detailed content sections for a lesson"""
        prompt = f"""Based on the following context and lesson outline, generate detailed content sections for the lesson.

        Curriculum Context:
        - Learning Objectives: {curriculum_context.learning_objectives}
        - Key Concepts: {curriculum_context.key_concepts}
        - Skill Level: {curriculum_context.skill_level}
        - Relevant Content: {curriculum_context.relevant_content}

        Lesson Outline:
        - Name: {lesson_outline.name}
        - Description: {lesson_outline.description}
        - Key Points: {lesson_outline.key_points}

        For each key point, generate a content section in the following format:
        TITLE: [section title]
        CONTENT: [detailed explanation]
        EXAMPLES:
        - [example 1]
        - [example 2]
        EXERCISES:
        - [exercise 1]
        - [exercise 2]

        Generate one section for each key point.
        """

        try:
            response = await self.llm.acomplete(prompt)
            text = response.text

            # Parse response into sections
            raw_sections = text.split("TITLE:")
            content_sections = []

            for raw_section in raw_sections[1:]:  # Skip first empty split
                lines = raw_section.split('\n')
                title = lines[0].strip()
                content = ""
                examples = []
                exercises = []

                current_section = None
                for line in lines[1:]:
                    line = line.strip()
                    if line.startswith("CONTENT:"):
                        current_section = "content"
                        content = line.replace("CONTENT:", "").strip()
                    elif line.startswith("EXAMPLES:"):
                        current_section = "examples"
                    elif line.startswith("EXERCISES:"):
                        current_section = "exercises"
                    elif line.startswith("-") and current_section:
                        item = line.lstrip("- ").strip()
                        if current_section == "examples":
                            examples.append(item)
                        elif current_section == "exercises":
                            exercises.append(item)
                    elif current_section == "content" and line:
                        content += " " + line

                content_sections.append(ContentSection(
                    title=title,
                    content=content.strip(),
                    examples=examples,
                    exercises=exercises
                ))

            return content_sections

        except Exception as e:
            raise HTTPException(
                status_code=500,
                detail=f"Failed to generate lesson content: {str(e)}"
            )
